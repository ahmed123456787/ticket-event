# Generated by Django 5.2.1 on 2025-06-19 21:48

import django.db.models.deletion
import ticket_system.core.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('organizer', 'Organizer'), ('admin', 'Admin'), ('attendee', 'Attendee'), ('visitor', 'Visitor')], default='visitor', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', ticket_system.core.manager.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('date', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('nb_tickets', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(default=False)),
                ('image_banner', models.ImageField(blank=True, null=True, upload_to='event_images/')),
                ('description', models.TextField(blank=True, null=True)),
                ('discount_for_tickets', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('ticket_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('view', 'View'), ('click', 'Click'), ('share', 'Share'), ('purchase_start', 'Purchase Started'), ('purchase_complete', 'Purchase Completed'), ('email_open', 'Email Opened')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('referrer', models.TextField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='core.event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Statistic',
                'verbose_name_plural': 'Event Statistics',
            },
        ),
        migrations.CreateModel(
            name='EventTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
                ('purshased_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('used', 'Used')], default='active', max_length=20)),
                ('is_used', models.BooleanField(default=False)),
                ('price_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='core.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='Test',
        ),
        migrations.AddField(
            model_name='event',
            name='attendees',
            field=models.ManyToManyField(related_name='attended_events', through='core.EventTicket', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='eventstats',
            index=models.Index(fields=['event', 'action_type'], name='core_events_event_i_0d4ec0_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstats',
            index=models.Index(fields=['timestamp'], name='core_events_timesta_1f00e2_idx'),
        ),
    ]
